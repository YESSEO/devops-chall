name: Pipeline

on:
  pull_request:
    types: [closed]
  
  workflow_dispatch:

jobs:

  ansible_dependencies:
    runs-on: self-hosted
    environment: prod
    env:
      ANSIBLE_USER: ${{ vars.ANSIBLE_USER }}
      KEEPALIVED_VIRTUAL_IP: ${{ vars.KEEPALIVED_VIRTUAL_IP }}
      NFS_BASE: ${{ vars.NFS_BASE }}
      NFS_SERVER_HOSTNAME: ${{ vars.NFS_SERVER_HOSTNAME }}
      NFS_SERVER_IP: ${{ vars.NFS_SERVER_IP }}
      SWARM_MANAGER_HOSTNAME: ${{ vars.SWARM_MANAGER_HOSTNAME }}
      SWARM_MANAGER_IP: ${{ vars.SWARM_MANAGER_IP }}
      SWARM_WORKER_HOSTNAME: ${{ vars.SWARM_WORKER_HOSTNAME }}
      SWARM_WORKER_IP: ${{ vars.SWARM_WORKER_IP }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          clean: false

      - name: Generate Ansible Inventory from template 
        run: |

            # Init Inventory
            inventory_template="$GITHUB_WORKSPACE/ansible/templates/inventory.example.ini"
            output_file="$GITHUB_WORKSPACE/ansible/inventory/inventory.ini"

            if [ ! -f "$inventory_template" ]; then
                    echo "[ERROR] Missing inventory template: $inventory_template"
                    exit 1
            fi

            set -a 
            envsubst < "$inventory_template" > "$output_file"
            set +a 
            echo "[INFO] Inventory generated at $output_file"


      - name: Generate Ansible Variables from template
        run: |
            vars_template="$GITHUB_WORKSPACE/ansible/group_vars/all_template.yml"
            vars_output="$GITHUB_WORKSPACE/ansible/group_vars/all.yml"

            if [ ! -f "$vars_template" ]; then
            echo "[ERROR] Missing vars template: $vars_template"
            exit 1
            fi

            set -a 
            envsubst < "$vars_template" > "$vars_output"
            set +a
            echo "[INFO] Vars file generated at $vars_output"
      
      - name: Copy Ansible vaults and NGINX Proxy certificates from secrets
        run: |
          # Define Cer folder and files
          cert_folder="$GITHUB_WORKSPACE/ansible/group_vars/secrets/certs"
          cert_file="$cert_folder/test.crt"

          # Ensure the folder exists
          if [[ ! -d "$cert_folder" ]; then
            echo "Directory $cert_folder does not exist. Creating it..."
            mkdir -p "$cert_folder"
          else
            echo "Directory $cert_folder exists."
          fi

          # Write the key from Github actions
                    # Write the certificate from GitHub secret
          base64 --decode > "$cert_file" <<EOF
          ${{ secrets.SSL_CRT }}
          EOF

          chmod 600 "$cert_file"
          echo "Certificate written to $cert_file"

          # Write the key from GitHub secret
          key_file="$cert_folder/test.key"
          base64 --decode > "$key_file" <<EOF
          ${{ secrets.SSL_KEY }}
          EOF
          echo "Key written to $key_file"
          
          # Write the vault from GitHub secret
          secret_vault_file="$GITHUB_WORKSPACE/ansible/group_vars/secrets/vault.yml"
          base64 --decode > "$secret_vault_file" <<EOF
          ${{ secrets.ANSIBLE_VAULT }}
          EOF
